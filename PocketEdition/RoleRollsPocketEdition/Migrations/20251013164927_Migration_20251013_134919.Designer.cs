// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RoleRollsPocketEdition.Infrastructure;

#nullable disable

namespace RoleRollsPocketEdition.Migrations
{
    [DbContext(typeof(RoleRollsDbContext))]
    [Migration("20251013164927_Migration_20251013_134919")]
    partial class Migration_20251013_134919
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RoleRollsPocketEdition.Archetypes.Entities.ArchertypePowerDescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ArchetypeId")
                        .HasColumnType("uuid");

                    b.Property<byte[]>("Description")
                        .HasColumnType("bytea");

                    b.Property<byte[]>("GameDescription")
                        .HasColumnType("bytea");

                    b.Property<string>("Name")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<int>("RequiredLevel")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ArchetypeId");

                    b.ToTable("ArchertypePowerDescriptions");
                });

            modelBuilder.Entity("RoleRollsPocketEdition.Archetypes.Entities.Archetype", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CampaignTemplateId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<byte[]>("Details")
                        .HasColumnType("bytea");

                    b.Property<string>("Name")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.HasKey("Id");

                    b.HasIndex("CampaignTemplateId");

                    b.ToTable("Archetypes");
                });

            modelBuilder.Entity("RoleRollsPocketEdition.Bonuses.Bonus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<int>("Application")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ArchetypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatureId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatureTypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<string>("Name")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<int>("Origin")
                        .HasColumnType("integer");

                    b.Property<Guid?>("PowerTemplateId")
                        .HasColumnType("uuid");

                    b.Property<int>("Target")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<int>("Value")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ArchetypeId");

                    b.HasIndex("CreatureId");

                    b.HasIndex("CreatureTypeId");

                    b.HasIndex("PowerTemplateId");

                    b.ToTable("Bonus");
                });

            modelBuilder.Entity("RoleRollsPocketEdition.Campaigns.Entities.Campaign", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CampaignTemplateId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("InvitationSecret")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MasterId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.HasKey("Id");

                    b.HasIndex("CampaignTemplateId");

                    b.ToTable("Campaigns");
                });

            modelBuilder.Entity("RoleRollsPocketEdition.Campaigns.Entities.CampaignPlayer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CampaignId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("InvidationCode")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PlayerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.ToTable("CampaignPlayers");
                });

            modelBuilder.Entity("RoleRollsPocketEdition.Core.Authentication.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<string>("Login")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<string>("Password")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("RoleRollsPocketEdition.CreatureTypes.Entities.CreatureType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CampaignTemplateId")
                        .HasColumnType("uuid");

                    b.Property<bool>("CanBeAlly")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanBeEnemy")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<string>("Name")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.HasKey("Id");

                    b.HasIndex("CampaignTemplateId");

                    b.ToTable("CreatureTypes");
                });

            modelBuilder.Entity("RoleRollsPocketEdition.Creatures.Entities.Attribute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AttributeTemplateId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatureId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<int>("Points")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AttributeTemplateId");

                    b.HasIndex("CreatureId");

                    b.ToTable("Attributes");
                });

            modelBuilder.Entity("RoleRollsPocketEdition.Creatures.Entities.Creature", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ArchetypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CampaignId")
                        .HasColumnType("uuid");

                    b.Property<int>("Category")
                        .HasColumnType("integer");

                    b.Property<Guid>("CreatureTemplateId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatureTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("EncounterId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsTemplate")
                        .HasColumnType("boolean");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<int>("MaxPointsPerSpecificSkill")
                        .HasColumnType("integer");

                    b.Property<int>("MinPointsPerSpecificSkill")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<int>("TotalSkillsPointsLimit")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ArchetypeId");

                    b.HasIndex("CampaignId");

                    b.HasIndex("CreatureTypeId");

                    b.HasIndex("EncounterId");

                    b.ToTable("Creatures");
                });

            modelBuilder.Entity("RoleRollsPocketEdition.Creatures.Entities.CreaturePower", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ConsumedUsages")
                        .HasColumnType("integer");

                    b.Property<Guid>("CreatureId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PowerTemplateId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatureId");

                    b.HasIndex("PowerTemplateId");

                    b.ToTable("CreaturePowers");
                });

            modelBuilder.Entity("RoleRollsPocketEdition.Creatures.Entities.Defense", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatureId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DefenseTemplateId")
                        .HasColumnType("uuid");

                    b.Property<string>("Formula")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<string>("Name")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatureId");

                    b.HasIndex("DefenseTemplateId");

                    b.ToTable("Defenses");
                });

            modelBuilder.Entity("RoleRollsPocketEdition.Creatures.Entities.Equipment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ArmsId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ChestId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatureId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FeetId")
                        .HasColumnType("uuid");

                    b.Property<int>("GripType")
                        .HasColumnType("integer");

                    b.Property<Guid?>("HandsId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("HeadId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LeftRingId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("MainHandId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("NeckId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OffHandId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RightRingId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("WaistId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ArmsId")
                        .IsUnique();

                    b.HasIndex("ChestId")
                        .IsUnique();

                    b.HasIndex("CreatureId")
                        .IsUnique();

                    b.HasIndex("FeetId")
                        .IsUnique();

                    b.HasIndex("HandsId")
                        .IsUnique();

                    b.HasIndex("HeadId")
                        .IsUnique();

                    b.HasIndex("LeftRingId")
                        .IsUnique();

                    b.HasIndex("MainHandId")
                        .IsUnique();

                    b.HasIndex("NeckId")
                        .IsUnique();

                    b.HasIndex("OffHandId")
                        .IsUnique();

                    b.HasIndex("RightRingId")
                        .IsUnique();

                    b.HasIndex("WaistId")
                        .IsUnique();

                    b.ToTable("Equipment");
                });

            modelBuilder.Entity("RoleRollsPocketEdition.Creatures.Entities.Inventory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatureId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatureId")
                        .IsUnique();

                    b.ToTable("Inventory");
                });

            modelBuilder.Entity("RoleRollsPocketEdition.Creatures.Entities.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatureId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<int>("Points")
                        .HasColumnType("integer");

                    b.Property<Guid>("SkillTemplateId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatureId");

                    b.HasIndex("SkillTemplateId");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("RoleRollsPocketEdition.Creatures.Entities.SpecificSkill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AttributeId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<int>("Points")
                        .HasColumnType("integer");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SpecificSkillTemplateId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AttributeId");

                    b.HasIndex("SkillId");

                    b.HasIndex("SpecificSkillTemplateId");

                    b.ToTable("MinorSkills");
                });

            modelBuilder.Entity("RoleRollsPocketEdition.Creatures.Entities.Vitality", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatureId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<int>("Value")
                        .HasColumnType("integer");

                    b.Property<Guid>("VitalityTemplateId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatureId");

                    b.HasIndex("VitalityTemplateId");

                    b.ToTable("Vitalities");
                });

            modelBuilder.Entity("RoleRollsPocketEdition.Damages.Entities.DamageType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CampaignTemplateId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.HasKey("Id");

                    b.HasIndex("CampaignTemplateId");

                    b.ToTable("DamageTypes");
                });

            modelBuilder.Entity("RoleRollsPocketEdition.Encounters.Entities.Encounter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CampaignId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.ToTable("Encounters");
                });

            modelBuilder.Entity("RoleRollsPocketEdition.Itens.Configurations.ItemConfiguration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CampaignTemplateId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CampaignTemplateId")
                        .IsUnique();

                    b.ToTable("ItemConfigurations");
                });

            modelBuilder.Entity("RoleRollsPocketEdition.Itens.ItemInstance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("InventoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("ItemType")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<Guid?>("PowerInstanceId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TemplateId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("InventoryId");

                    b.HasIndex("PowerInstanceId");

                    b.HasIndex("TemplateId");

                    b.ToTable("ItemInstances");

                    b.HasDiscriminator<string>("ItemType").HasValue("Item");
                });

            modelBuilder.Entity("RoleRollsPocketEdition.Itens.Templates.ItemTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CampaignId")
                        .HasColumnType("uuid");

                    b.Property<string>("ItemType")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<string>("Name")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<Guid?>("PowerId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.HasIndex("PowerId");

                    b.ToTable("ItemTemplates");

                    b.HasDiscriminator<string>("ItemType").HasValue("Item");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("RoleRollsPocketEdition.Powers.Entities.PowerInstance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<string>("Name")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<Guid>("TemplateId")
                        .HasColumnType("uuid");

                    b.Property<int>("UsedCharges")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TemplateId");

                    b.ToTable("PowerInstance");
                });

            modelBuilder.Entity("RoleRollsPocketEdition.Powers.Entities.PowerTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ActionType")
                        .HasColumnType("integer");

                    b.Property<Guid>("CampaignTemplateId")
                        .HasColumnType("uuid");

                    b.Property<string>("CastDescription")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<string>("CastFormula")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<string>("Description")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<int?>("Duration")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<int>("PowerDurationType")
                        .HasColumnType("integer");

                    b.Property<Guid?>("TargetDefenseId")
                        .HasColumnType("uuid");

                    b.Property<int>("TargetType")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<int?>("UsageType")
                        .HasColumnType("integer");

                    b.Property<string>("UsagesFormula")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<Guid?>("UseAttributeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CampaignTemplateId");

                    b.ToTable("PowerTemplates");
                });

            modelBuilder.Entity("RoleRollsPocketEdition.Rolls.Entities.Roll", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ActorId")
                        .HasColumnType("uuid");

                    b.Property<int>("ActorType")
                        .HasColumnType("integer");

                    b.Property<int>("Advantage")
                        .HasColumnType("integer");

                    b.Property<int>("Bonus")
                        .HasColumnType("integer");

                    b.Property<int>("Complexity")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<int>("Difficulty")
                        .HasColumnType("integer");

                    b.Property<bool>("Hidden")
                        .HasColumnType("boolean");

                    b.Property<int>("Luck")
                        .HasColumnType("integer");

                    b.Property<int>("NumberOfCriticalFailures")
                        .HasColumnType("integer");

                    b.Property<int>("NumberOfCriticalSuccesses")
                        .HasColumnType("integer");

                    b.Property<int>("NumberOfDices")
                        .HasColumnType("integer");

                    b.Property<int>("NumberOfRollSuccesses")
                        .HasColumnType("integer");

                    b.Property<int>("NumberOfSuccesses")
                        .HasColumnType("integer");

                    b.Property<string>("RolledDices")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<Guid>("SceneId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Success")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("SceneId");

                    b.ToTable("Rolls");
                });

            modelBuilder.Entity("RoleRollsPocketEdition.Scenes.Entities.Scene", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CampaignId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.ToTable("CampaignScenes");
                });

            modelBuilder.Entity("RoleRollsPocketEdition.Scenes.Entities.SceneAction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ActorId")
                        .HasColumnType("uuid");

                    b.Property<int>("ActorType")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<Guid>("SceneId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SceneId");

                    b.ToTable("SceneActions");
                });

            modelBuilder.Entity("RoleRollsPocketEdition.Scenes.Entities.SceneCreature", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CreatureCategory")
                        .HasColumnType("integer");

                    b.Property<Guid>("CreatureId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Hidden")
                        .HasColumnType("boolean");

                    b.Property<Guid>("SceneId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SceneId");

                    b.ToTable("SceneCreatures");
                });

            modelBuilder.Entity("RoleRollsPocketEdition.Templates.Entities.AttributeTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CampaignTemplateId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.HasKey("Id");

                    b.HasIndex("CampaignTemplateId");

                    b.ToTable("AttributeTemplates");
                });

            modelBuilder.Entity("RoleRollsPocketEdition.Templates.Entities.CampaignTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ArchetypeTitle")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<string>("CreatureTypeTitle")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<bool>("Default")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<int>("TotalAttributePoints")
                        .HasColumnType("integer");

                    b.Property<int>("TotalSkillsPoints")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("CampaignTemplates");
                });

            modelBuilder.Entity("RoleRollsPocketEdition.Templates.Entities.DefenseTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CampaignTemplateId")
                        .HasColumnType("uuid");

                    b.Property<string>("Formula")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<string>("Name")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.HasKey("Id");

                    b.HasIndex("CampaignTemplateId");

                    b.ToTable("DefenseTemplates");
                });

            modelBuilder.Entity("RoleRollsPocketEdition.Templates.Entities.SkillTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AttributeTemplateId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CampaignTemplateId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.HasKey("Id");

                    b.HasIndex("AttributeTemplateId");

                    b.HasIndex("CampaignTemplateId");

                    b.ToTable("SkillTemplates");
                });

            modelBuilder.Entity("RoleRollsPocketEdition.Templates.Entities.SpecificSkillTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AttributeTemplateId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<Guid>("SkillTemplateId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AttributeTemplateId");

                    b.HasIndex("SkillTemplateId");

                    b.ToTable("MinorSkillTemplates");
                });

            modelBuilder.Entity("RoleRollsPocketEdition.Templates.Entities.VitalityTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CampaignTemplateId")
                        .HasColumnType("uuid");

                    b.Property<string>("Formula")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<string>("Name")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.HasKey("Id");

                    b.HasIndex("CampaignTemplateId");

                    b.ToTable("VitalityTemplates");
                });

            modelBuilder.Entity("RoleRollsPocketEdition.Itens.Templates.ArmorTemplate", b =>
                {
                    b.HasBaseType("RoleRollsPocketEdition.Itens.Templates.ItemTemplate");

                    b.Property<int>("Category")
                        .HasColumnType("integer");

                    b.Property<int>("Slot")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("Armor");
                });

            modelBuilder.Entity("RoleRollsPocketEdition.Itens.Templates.ConsumableTemplate", b =>
                {
                    b.HasBaseType("RoleRollsPocketEdition.Itens.Templates.ItemTemplate");

                    b.HasDiscriminator().HasValue("Consumable");
                });

            modelBuilder.Entity("RoleRollsPocketEdition.Itens.Templates.WeaponTemplate", b =>
                {
                    b.HasBaseType("RoleRollsPocketEdition.Itens.Templates.ItemTemplate");

                    b.Property<int>("Category")
                        .HasColumnType("integer");

                    b.Property<int>("DamageType")
                        .HasColumnType("integer");

                    b.Property<int>("Slot")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("integer");

                    b.ToTable("ItemTemplates", t =>
                        {
                            t.Property("Category")
                                .HasColumnName("WeaponTemplate_Category");
                        });

                    b.HasDiscriminator().HasValue("Weapon");
                });

            modelBuilder.Entity("RoleRollsPocketEdition.Archetypes.Entities.ArchertypePowerDescription", b =>
                {
                    b.HasOne("RoleRollsPocketEdition.Archetypes.Entities.Archetype", "Archetype")
                        .WithMany("PowerDescriptions")
                        .HasForeignKey("ArchetypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Archetype");
                });

            modelBuilder.Entity("RoleRollsPocketEdition.Archetypes.Entities.Archetype", b =>
                {
                    b.HasOne("RoleRollsPocketEdition.Templates.Entities.CampaignTemplate", "CampaignTemplate")
                        .WithMany("Archetypes")
                        .HasForeignKey("CampaignTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CampaignTemplate");
                });

            modelBuilder.Entity("RoleRollsPocketEdition.Bonuses.Bonus", b =>
                {
                    b.HasOne("RoleRollsPocketEdition.Archetypes.Entities.Archetype", null)
                        .WithMany("Bonuses")
                        .HasForeignKey("ArchetypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RoleRollsPocketEdition.Creatures.Entities.Creature", null)
                        .WithMany("Bonuses")
                        .HasForeignKey("CreatureId");

                    b.HasOne("RoleRollsPocketEdition.CreatureTypes.Entities.CreatureType", null)
                        .WithMany("Bonuses")
                        .HasForeignKey("CreatureTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RoleRollsPocketEdition.Powers.Entities.PowerTemplate", null)
                        .WithMany("Bonuses")
                        .HasForeignKey("PowerTemplateId");

                    b.OwnsOne("RoleRollsPocketEdition.Core.Entities.Property", "Property", b1 =>
                        {
                            b1.Property<Guid>("BonusId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid");

                            b1.Property<int?>("Type")
                                .HasColumnType("integer");

                            b1.HasKey("BonusId");

                            b1.ToTable("Bonus");

                            b1.WithOwner()
                                .HasForeignKey("BonusId");
                        });

                    b.Navigation("Property");
                });

            modelBuilder.Entity("RoleRollsPocketEdition.Campaigns.Entities.Campaign", b =>
                {
                    b.HasOne("RoleRollsPocketEdition.Templates.Entities.CampaignTemplate", "CampaignTemplate")
                        .WithMany("Campaigns")
                        .HasForeignKey("CampaignTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CampaignTemplate");
                });

            modelBuilder.Entity("RoleRollsPocketEdition.Campaigns.Entities.CampaignPlayer", b =>
                {
                    b.HasOne("RoleRollsPocketEdition.Campaigns.Entities.Campaign", null)
                        .WithMany("CampaignPlayers")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoleRollsPocketEdition.CreatureTypes.Entities.CreatureType", b =>
                {
                    b.HasOne("RoleRollsPocketEdition.Templates.Entities.CampaignTemplate", "CampaignTemplate")
                        .WithMany("CreatureTypes")
                        .HasForeignKey("CampaignTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CampaignTemplate");
                });

            modelBuilder.Entity("RoleRollsPocketEdition.Creatures.Entities.Attribute", b =>
                {
                    b.HasOne("RoleRollsPocketEdition.Templates.Entities.AttributeTemplate", "AttributeTemplate")
                        .WithMany("Attributes")
                        .HasForeignKey("AttributeTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RoleRollsPocketEdition.Creatures.Entities.Creature", "Creature")
                        .WithMany("Attributes")
                        .HasForeignKey("CreatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AttributeTemplate");

                    b.Navigation("Creature");
                });

            modelBuilder.Entity("RoleRollsPocketEdition.Creatures.Entities.Creature", b =>
                {
                    b.HasOne("RoleRollsPocketEdition.Archetypes.Entities.Archetype", "Archetype")
                        .WithMany("Creatures")
                        .HasForeignKey("ArchetypeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("RoleRollsPocketEdition.Campaigns.Entities.Campaign", "Campaign")
                        .WithMany()
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RoleRollsPocketEdition.CreatureTypes.Entities.CreatureType", "CreatureType")
                        .WithMany("Creatures")
                        .HasForeignKey("CreatureTypeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("RoleRollsPocketEdition.Encounters.Entities.Encounter", "Encounter")
                        .WithMany("Creatures")
                        .HasForeignKey("EncounterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Archetype");

                    b.Navigation("Campaign");

                    b.Navigation("CreatureType");

                    b.Navigation("Encounter");
                });

            modelBuilder.Entity("RoleRollsPocketEdition.Creatures.Entities.CreaturePower", b =>
                {
                    b.HasOne("RoleRollsPocketEdition.Creatures.Entities.Creature", "Creature")
                        .WithMany("Powers")
                        .HasForeignKey("CreatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RoleRollsPocketEdition.Powers.Entities.PowerTemplate", "PowerTemplate")
                        .WithMany()
                        .HasForeignKey("PowerTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creature");

                    b.Navigation("PowerTemplate");
                });

            modelBuilder.Entity("RoleRollsPocketEdition.Creatures.Entities.Defense", b =>
                {
                    b.HasOne("RoleRollsPocketEdition.Creatures.Entities.Creature", "Creature")
                        .WithMany("Defenses")
                        .HasForeignKey("CreatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RoleRollsPocketEdition.Templates.Entities.DefenseTemplate", "DefenseTemplate")
                        .WithMany("Defenses")
                        .HasForeignKey("DefenseTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creature");

                    b.Navigation("DefenseTemplate");
                });

            modelBuilder.Entity("RoleRollsPocketEdition.Creatures.Entities.Equipment", b =>
                {
                    b.HasOne("RoleRollsPocketEdition.Itens.ItemInstance", "Arms")
                        .WithOne()
                        .HasForeignKey("RoleRollsPocketEdition.Creatures.Entities.Equipment", "ArmsId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("RoleRollsPocketEdition.Itens.ItemInstance", "Chest")
                        .WithOne()
                        .HasForeignKey("RoleRollsPocketEdition.Creatures.Entities.Equipment", "ChestId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("RoleRollsPocketEdition.Creatures.Entities.Creature", "Creature")
                        .WithOne("Equipment")
                        .HasForeignKey("RoleRollsPocketEdition.Creatures.Entities.Equipment", "CreatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RoleRollsPocketEdition.Itens.ItemInstance", "Feet")
                        .WithOne()
                        .HasForeignKey("RoleRollsPocketEdition.Creatures.Entities.Equipment", "FeetId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("RoleRollsPocketEdition.Itens.ItemInstance", "Hands")
                        .WithOne()
                        .HasForeignKey("RoleRollsPocketEdition.Creatures.Entities.Equipment", "HandsId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("RoleRollsPocketEdition.Itens.ItemInstance", "Head")
                        .WithOne()
                        .HasForeignKey("RoleRollsPocketEdition.Creatures.Entities.Equipment", "HeadId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("RoleRollsPocketEdition.Itens.ItemInstance", "LeftRing")
                        .WithOne()
                        .HasForeignKey("RoleRollsPocketEdition.Creatures.Entities.Equipment", "LeftRingId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("RoleRollsPocketEdition.Itens.ItemInstance", "MainHand")
                        .WithOne()
                        .HasForeignKey("RoleRollsPocketEdition.Creatures.Entities.Equipment", "MainHandId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("RoleRollsPocketEdition.Itens.ItemInstance", "Neck")
                        .WithOne()
                        .HasForeignKey("RoleRollsPocketEdition.Creatures.Entities.Equipment", "NeckId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RoleRollsPocketEdition.Itens.ItemInstance", "OffHand")
                        .WithOne()
                        .HasForeignKey("RoleRollsPocketEdition.Creatures.Entities.Equipment", "OffHandId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("RoleRollsPocketEdition.Itens.ItemInstance", "RightRing")
                        .WithOne()
                        .HasForeignKey("RoleRollsPocketEdition.Creatures.Entities.Equipment", "RightRingId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("RoleRollsPocketEdition.Itens.ItemInstance", "Waist")
                        .WithOne()
                        .HasForeignKey("RoleRollsPocketEdition.Creatures.Entities.Equipment", "WaistId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Arms");

                    b.Navigation("Chest");

                    b.Navigation("Creature");

                    b.Navigation("Feet");

                    b.Navigation("Hands");

                    b.Navigation("Head");

                    b.Navigation("LeftRing");

                    b.Navigation("MainHand");

                    b.Navigation("Neck");

                    b.Navigation("OffHand");

                    b.Navigation("RightRing");

                    b.Navigation("Waist");
                });

            modelBuilder.Entity("RoleRollsPocketEdition.Creatures.Entities.Inventory", b =>
                {
                    b.HasOne("RoleRollsPocketEdition.Creatures.Entities.Creature", "Creature")
                        .WithOne("Inventory")
                        .HasForeignKey("RoleRollsPocketEdition.Creatures.Entities.Inventory", "CreatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creature");
                });

            modelBuilder.Entity("RoleRollsPocketEdition.Creatures.Entities.Skill", b =>
                {
                    b.HasOne("RoleRollsPocketEdition.Creatures.Entities.Creature", null)
                        .WithMany("Skills")
                        .HasForeignKey("CreatureId");

                    b.HasOne("RoleRollsPocketEdition.Templates.Entities.SkillTemplate", "SkillTemplate")
                        .WithMany("Skills")
                        .HasForeignKey("SkillTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SkillTemplate");
                });

            modelBuilder.Entity("RoleRollsPocketEdition.Creatures.Entities.SpecificSkill", b =>
                {
                    b.HasOne("RoleRollsPocketEdition.Creatures.Entities.Attribute", "Attribute")
                        .WithMany("SpecificSkills")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RoleRollsPocketEdition.Creatures.Entities.Skill", "Skill")
                        .WithMany("SpecificSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RoleRollsPocketEdition.Templates.Entities.SpecificSkillTemplate", "SpecificSkillTemplate")
                        .WithMany("SpecificSkills")
                        .HasForeignKey("SpecificSkillTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attribute");

                    b.Navigation("Skill");

                    b.Navigation("SpecificSkillTemplate");
                });

            modelBuilder.Entity("RoleRollsPocketEdition.Creatures.Entities.Vitality", b =>
                {
                    b.HasOne("RoleRollsPocketEdition.Creatures.Entities.Creature", "Creature")
                        .WithMany("Vitalities")
                        .HasForeignKey("CreatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RoleRollsPocketEdition.Templates.Entities.VitalityTemplate", "VitalityTemplate")
                        .WithMany("Vitalities")
                        .HasForeignKey("VitalityTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creature");

                    b.Navigation("VitalityTemplate");
                });

            modelBuilder.Entity("RoleRollsPocketEdition.Damages.Entities.DamageType", b =>
                {
                    b.HasOne("RoleRollsPocketEdition.Templates.Entities.CampaignTemplate", "CampaignTemplate")
                        .WithMany("DamageTypes")
                        .HasForeignKey("CampaignTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CampaignTemplate");
                });

            modelBuilder.Entity("RoleRollsPocketEdition.Encounters.Entities.Encounter", b =>
                {
                    b.HasOne("RoleRollsPocketEdition.Campaigns.Entities.Campaign", "Campaign")
                        .WithMany("Encounters")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");
                });

            modelBuilder.Entity("RoleRollsPocketEdition.Itens.Configurations.ItemConfiguration", b =>
                {
                    b.HasOne("RoleRollsPocketEdition.Templates.Entities.CampaignTemplate", "CampaignTemplate")
                        .WithOne("ItemConfiguration")
                        .HasForeignKey("RoleRollsPocketEdition.Itens.Configurations.ItemConfiguration", "CampaignTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("RoleRollsPocketEdition.Core.Entities.Property", "ArmorProperty", b1 =>
                        {
                            b1.Property<Guid>("ItemConfigurationId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid");

                            b1.Property<int?>("Type")
                                .HasColumnType("integer");

                            b1.HasKey("ItemConfigurationId");

                            b1.ToTable("ItemConfigurations");

                            b1.WithOwner()
                                .HasForeignKey("ItemConfigurationId");
                        });

                    b.OwnsOne("RoleRollsPocketEdition.Core.Entities.Property", "BasicAttackTargetFirstVitality", b1 =>
                        {
                            b1.Property<Guid>("ItemConfigurationId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid");

                            b1.Property<int?>("Type")
                                .HasColumnType("integer");

                            b1.HasKey("ItemConfigurationId");

                            b1.ToTable("ItemConfigurations");

                            b1.WithOwner()
                                .HasForeignKey("ItemConfigurationId");
                        });

                    b.OwnsOne("RoleRollsPocketEdition.Core.Entities.Property", "BasicAttackTargetSecondVitality", b1 =>
                        {
                            b1.Property<Guid>("ItemConfigurationId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid");

                            b1.Property<int?>("Type")
                                .HasColumnType("integer");

                            b1.HasKey("ItemConfigurationId");

                            b1.ToTable("ItemConfigurations");

                            b1.WithOwner()
                                .HasForeignKey("ItemConfigurationId");
                        });

                    b.OwnsOne("RoleRollsPocketEdition.Core.Entities.Property", "BlockProperty", b1 =>
                        {
                            b1.Property<Guid>("ItemConfigurationId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid");

                            b1.Property<int?>("Type")
                                .HasColumnType("integer");

                            b1.HasKey("ItemConfigurationId");

                            b1.ToTable("ItemConfigurations");

                            b1.WithOwner()
                                .HasForeignKey("ItemConfigurationId");
                        });

                    b.OwnsOne("RoleRollsPocketEdition.Core.Entities.Property", "MeleeHeavyWeaponDamageProperty", b1 =>
                        {
                            b1.Property<Guid>("ItemConfigurationId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid");

                            b1.Property<int?>("Type")
                                .HasColumnType("integer");

                            b1.HasKey("ItemConfigurationId");

                            b1.ToTable("ItemConfigurations");

                            b1.WithOwner()
                                .HasForeignKey("ItemConfigurationId");
                        });

                    b.OwnsOne("RoleRollsPocketEdition.Core.Entities.Property", "MeleeHeavyWeaponHitProperty", b1 =>
                        {
                            b1.Property<Guid>("ItemConfigurationId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid");

                            b1.Property<int?>("Type")
                                .HasColumnType("integer");

                            b1.HasKey("ItemConfigurationId");

                            b1.ToTable("ItemConfigurations");

                            b1.WithOwner()
                                .HasForeignKey("ItemConfigurationId");
                        });

                    b.OwnsOne("RoleRollsPocketEdition.Core.Entities.Property", "MeleeLightWeaponDamageProperty", b1 =>
                        {
                            b1.Property<Guid>("ItemConfigurationId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid");

                            b1.Property<int?>("Type")
                                .HasColumnType("integer");

                            b1.HasKey("ItemConfigurationId");

                            b1.ToTable("ItemConfigurations");

                            b1.WithOwner()
                                .HasForeignKey("ItemConfigurationId");
                        });

                    b.OwnsOne("RoleRollsPocketEdition.Core.Entities.Property", "MeleeLightWeaponHitProperty", b1 =>
                        {
                            b1.Property<Guid>("ItemConfigurationId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid");

                            b1.Property<int?>("Type")
                                .HasColumnType("integer");

                            b1.HasKey("ItemConfigurationId");

                            b1.ToTable("ItemConfigurations");

                            b1.WithOwner()
                                .HasForeignKey("ItemConfigurationId");
                        });

                    b.OwnsOne("RoleRollsPocketEdition.Core.Entities.Property", "MeleeMediumWeaponDamageProperty", b1 =>
                        {
                            b1.Property<Guid>("ItemConfigurationId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid");

                            b1.Property<int?>("Type")
                                .HasColumnType("integer");

                            b1.HasKey("ItemConfigurationId");

                            b1.ToTable("ItemConfigurations");

                            b1.WithOwner()
                                .HasForeignKey("ItemConfigurationId");
                        });

                    b.OwnsOne("RoleRollsPocketEdition.Core.Entities.Property", "MeleeMediumWeaponHitProperty", b1 =>
                        {
                            b1.Property<Guid>("ItemConfigurationId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid");

                            b1.Property<int?>("Type")
                                .HasColumnType("integer");

                            b1.HasKey("ItemConfigurationId");

                            b1.ToTable("ItemConfigurations");

                            b1.WithOwner()
                                .HasForeignKey("ItemConfigurationId");
                        });

                    b.OwnsOne("RoleRollsPocketEdition.Core.Entities.Property", "RangedHeavyWeaponDamageProperty", b1 =>
                        {
                            b1.Property<Guid>("ItemConfigurationId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid");

                            b1.Property<int?>("Type")
                                .HasColumnType("integer");

                            b1.HasKey("ItemConfigurationId");

                            b1.ToTable("ItemConfigurations");

                            b1.WithOwner()
                                .HasForeignKey("ItemConfigurationId");
                        });

                    b.OwnsOne("RoleRollsPocketEdition.Core.Entities.Property", "RangedHeavyWeaponHitProperty", b1 =>
                        {
                            b1.Property<Guid>("ItemConfigurationId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid");

                            b1.Property<int?>("Type")
                                .HasColumnType("integer");

                            b1.HasKey("ItemConfigurationId");

                            b1.ToTable("ItemConfigurations");

                            b1.WithOwner()
                                .HasForeignKey("ItemConfigurationId");
                        });

                    b.OwnsOne("RoleRollsPocketEdition.Core.Entities.Property", "RangedLightWeaponDamageProperty", b1 =>
                        {
                            b1.Property<Guid>("ItemConfigurationId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid");

                            b1.Property<int?>("Type")
                                .HasColumnType("integer");

                            b1.HasKey("ItemConfigurationId");

                            b1.ToTable("ItemConfigurations");

                            b1.WithOwner()
                                .HasForeignKey("ItemConfigurationId");
                        });

                    b.OwnsOne("RoleRollsPocketEdition.Core.Entities.Property", "RangedLightWeaponHitProperty", b1 =>
                        {
                            b1.Property<Guid>("ItemConfigurationId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid");

                            b1.Property<int?>("Type")
                                .HasColumnType("integer");

                            b1.HasKey("ItemConfigurationId");

                            b1.ToTable("ItemConfigurations");

                            b1.WithOwner()
                                .HasForeignKey("ItemConfigurationId");
                        });

                    b.OwnsOne("RoleRollsPocketEdition.Core.Entities.Property", "RangedMediumWeaponDamageProperty", b1 =>
                        {
                            b1.Property<Guid>("ItemConfigurationId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid");

                            b1.Property<int?>("Type")
                                .HasColumnType("integer");

                            b1.HasKey("ItemConfigurationId");

                            b1.ToTable("ItemConfigurations");

                            b1.WithOwner()
                                .HasForeignKey("ItemConfigurationId");
                        });

                    b.OwnsOne("RoleRollsPocketEdition.Core.Entities.Property", "RangedMediumWeaponHitProperty", b1 =>
                        {
                            b1.Property<Guid>("ItemConfigurationId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid");

                            b1.Property<int?>("Type")
                                .HasColumnType("integer");

                            b1.HasKey("ItemConfigurationId");

                            b1.ToTable("ItemConfigurations");

                            b1.WithOwner()
                                .HasForeignKey("ItemConfigurationId");
                        });

                    b.Navigation("ArmorProperty");

                    b.Navigation("BasicAttackTargetFirstVitality");

                    b.Navigation("BasicAttackTargetSecondVitality");

                    b.Navigation("BlockProperty");

                    b.Navigation("CampaignTemplate");

                    b.Navigation("MeleeHeavyWeaponDamageProperty");

                    b.Navigation("MeleeHeavyWeaponHitProperty");

                    b.Navigation("MeleeLightWeaponDamageProperty");

                    b.Navigation("MeleeLightWeaponHitProperty");

                    b.Navigation("MeleeMediumWeaponDamageProperty");

                    b.Navigation("MeleeMediumWeaponHitProperty");

                    b.Navigation("RangedHeavyWeaponDamageProperty");

                    b.Navigation("RangedHeavyWeaponHitProperty");

                    b.Navigation("RangedLightWeaponDamageProperty");

                    b.Navigation("RangedLightWeaponHitProperty");

                    b.Navigation("RangedMediumWeaponDamageProperty");

                    b.Navigation("RangedMediumWeaponHitProperty");
                });

            modelBuilder.Entity("RoleRollsPocketEdition.Itens.ItemInstance", b =>
                {
                    b.HasOne("RoleRollsPocketEdition.Creatures.Entities.Inventory", null)
                        .WithMany("Items")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RoleRollsPocketEdition.Powers.Entities.PowerInstance", "PowerInstance")
                        .WithMany("ItemInstances")
                        .HasForeignKey("PowerInstanceId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("RoleRollsPocketEdition.Itens.Templates.ItemTemplate", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PowerInstance");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("RoleRollsPocketEdition.Itens.Templates.ItemTemplate", b =>
                {
                    b.HasOne("RoleRollsPocketEdition.Campaigns.Entities.Campaign", "Campaign")
                        .WithMany()
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RoleRollsPocketEdition.Powers.Entities.PowerTemplate", "Power")
                        .WithMany("ItemTemplates")
                        .HasForeignKey("PowerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Campaign");

                    b.Navigation("Power");
                });

            modelBuilder.Entity("RoleRollsPocketEdition.Powers.Entities.PowerInstance", b =>
                {
                    b.HasOne("RoleRollsPocketEdition.Powers.Entities.PowerTemplate", "Template")
                        .WithMany("Instances")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Template");
                });

            modelBuilder.Entity("RoleRollsPocketEdition.Powers.Entities.PowerTemplate", b =>
                {
                    b.HasOne("RoleRollsPocketEdition.Templates.Entities.CampaignTemplate", "CampaignTemplate")
                        .WithMany("CombatManeuvers")
                        .HasForeignKey("CampaignTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CampaignTemplate");
                });

            modelBuilder.Entity("RoleRollsPocketEdition.Rolls.Entities.Roll", b =>
                {
                    b.HasOne("RoleRollsPocketEdition.Scenes.Entities.Scene", "Scene")
                        .WithMany("Rolls")
                        .HasForeignKey("SceneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("RoleRollsPocketEdition.Core.Entities.Property", "Property", b1 =>
                        {
                            b1.Property<Guid>("RollId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid");

                            b1.Property<int?>("Type")
                                .HasColumnType("integer");

                            b1.HasKey("RollId");

                            b1.ToTable("Rolls");

                            b1.WithOwner()
                                .HasForeignKey("RollId");
                        });

                    b.Navigation("Property");

                    b.Navigation("Scene");
                });

            modelBuilder.Entity("RoleRollsPocketEdition.Scenes.Entities.Scene", b =>
                {
                    b.HasOne("RoleRollsPocketEdition.Campaigns.Entities.Campaign", "Campaign")
                        .WithMany("Scenes")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");
                });

            modelBuilder.Entity("RoleRollsPocketEdition.Scenes.Entities.SceneAction", b =>
                {
                    b.HasOne("RoleRollsPocketEdition.Scenes.Entities.Scene", null)
                        .WithMany("Actions")
                        .HasForeignKey("SceneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoleRollsPocketEdition.Scenes.Entities.SceneCreature", b =>
                {
                    b.HasOne("RoleRollsPocketEdition.Scenes.Entities.Scene", "Scene")
                        .WithMany("Creatures")
                        .HasForeignKey("SceneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Scene");
                });

            modelBuilder.Entity("RoleRollsPocketEdition.Templates.Entities.AttributeTemplate", b =>
                {
                    b.HasOne("RoleRollsPocketEdition.Templates.Entities.CampaignTemplate", "CampaignTemplate")
                        .WithMany("Attributes")
                        .HasForeignKey("CampaignTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CampaignTemplate");
                });

            modelBuilder.Entity("RoleRollsPocketEdition.Templates.Entities.DefenseTemplate", b =>
                {
                    b.HasOne("RoleRollsPocketEdition.Templates.Entities.CampaignTemplate", "CampaignTemplate")
                        .WithMany("Defenses")
                        .HasForeignKey("CampaignTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CampaignTemplate");
                });

            modelBuilder.Entity("RoleRollsPocketEdition.Templates.Entities.SkillTemplate", b =>
                {
                    b.HasOne("RoleRollsPocketEdition.Templates.Entities.AttributeTemplate", "AttributeTemplate")
                        .WithMany()
                        .HasForeignKey("AttributeTemplateId");

                    b.HasOne("RoleRollsPocketEdition.Templates.Entities.CampaignTemplate", "CampaignTemplate")
                        .WithMany("Skills")
                        .HasForeignKey("CampaignTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AttributeTemplate");

                    b.Navigation("CampaignTemplate");
                });

            modelBuilder.Entity("RoleRollsPocketEdition.Templates.Entities.SpecificSkillTemplate", b =>
                {
                    b.HasOne("RoleRollsPocketEdition.Templates.Entities.AttributeTemplate", "AttributeTemplate")
                        .WithMany()
                        .HasForeignKey("AttributeTemplateId");

                    b.HasOne("RoleRollsPocketEdition.Templates.Entities.SkillTemplate", "SkillTemplate")
                        .WithMany("SpecificSkillTemplates")
                        .HasForeignKey("SkillTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AttributeTemplate");

                    b.Navigation("SkillTemplate");
                });

            modelBuilder.Entity("RoleRollsPocketEdition.Templates.Entities.VitalityTemplate", b =>
                {
                    b.HasOne("RoleRollsPocketEdition.Templates.Entities.CampaignTemplate", "CampaignTemplate")
                        .WithMany("Vitalities")
                        .HasForeignKey("CampaignTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CampaignTemplate");
                });

            modelBuilder.Entity("RoleRollsPocketEdition.Archetypes.Entities.Archetype", b =>
                {
                    b.Navigation("Bonuses");

                    b.Navigation("Creatures");

                    b.Navigation("PowerDescriptions");
                });

            modelBuilder.Entity("RoleRollsPocketEdition.Campaigns.Entities.Campaign", b =>
                {
                    b.Navigation("CampaignPlayers");

                    b.Navigation("Encounters");

                    b.Navigation("Scenes");
                });

            modelBuilder.Entity("RoleRollsPocketEdition.CreatureTypes.Entities.CreatureType", b =>
                {
                    b.Navigation("Bonuses");

                    b.Navigation("Creatures");
                });

            modelBuilder.Entity("RoleRollsPocketEdition.Creatures.Entities.Attribute", b =>
                {
                    b.Navigation("SpecificSkills");
                });

            modelBuilder.Entity("RoleRollsPocketEdition.Creatures.Entities.Creature", b =>
                {
                    b.Navigation("Attributes");

                    b.Navigation("Bonuses");

                    b.Navigation("Defenses");

                    b.Navigation("Equipment")
                        .IsRequired();

                    b.Navigation("Inventory")
                        .IsRequired();

                    b.Navigation("Powers");

                    b.Navigation("Skills");

                    b.Navigation("Vitalities");
                });

            modelBuilder.Entity("RoleRollsPocketEdition.Creatures.Entities.Inventory", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("RoleRollsPocketEdition.Creatures.Entities.Skill", b =>
                {
                    b.Navigation("SpecificSkills");
                });

            modelBuilder.Entity("RoleRollsPocketEdition.Encounters.Entities.Encounter", b =>
                {
                    b.Navigation("Creatures");
                });

            modelBuilder.Entity("RoleRollsPocketEdition.Powers.Entities.PowerInstance", b =>
                {
                    b.Navigation("ItemInstances");
                });

            modelBuilder.Entity("RoleRollsPocketEdition.Powers.Entities.PowerTemplate", b =>
                {
                    b.Navigation("Bonuses");

                    b.Navigation("Instances");

                    b.Navigation("ItemTemplates");
                });

            modelBuilder.Entity("RoleRollsPocketEdition.Scenes.Entities.Scene", b =>
                {
                    b.Navigation("Actions");

                    b.Navigation("Creatures");

                    b.Navigation("Rolls");
                });

            modelBuilder.Entity("RoleRollsPocketEdition.Templates.Entities.AttributeTemplate", b =>
                {
                    b.Navigation("Attributes");
                });

            modelBuilder.Entity("RoleRollsPocketEdition.Templates.Entities.CampaignTemplate", b =>
                {
                    b.Navigation("Archetypes");

                    b.Navigation("Attributes");

                    b.Navigation("Campaigns");

                    b.Navigation("CombatManeuvers");

                    b.Navigation("CreatureTypes");

                    b.Navigation("DamageTypes");

                    b.Navigation("Defenses");

                    b.Navigation("ItemConfiguration")
                        .IsRequired();

                    b.Navigation("Skills");

                    b.Navigation("Vitalities");
                });

            modelBuilder.Entity("RoleRollsPocketEdition.Templates.Entities.DefenseTemplate", b =>
                {
                    b.Navigation("Defenses");
                });

            modelBuilder.Entity("RoleRollsPocketEdition.Templates.Entities.SkillTemplate", b =>
                {
                    b.Navigation("Skills");

                    b.Navigation("SpecificSkillTemplates");
                });

            modelBuilder.Entity("RoleRollsPocketEdition.Templates.Entities.SpecificSkillTemplate", b =>
                {
                    b.Navigation("SpecificSkills");
                });

            modelBuilder.Entity("RoleRollsPocketEdition.Templates.Entities.VitalityTemplate", b =>
                {
                    b.Navigation("Vitalities");
                });
#pragma warning restore 612, 618
        }
    }
}
